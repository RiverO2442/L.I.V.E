generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  progresses   UserProgress[]
  lessonStates UserLessonProgress[]  
  attempts     QuizAttempt[]
  RefreshToken RefreshToken[]
}

model Module {
  id        String   @id @default(uuid())
  slug      String   @unique
  title     String
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons    Lesson[]
  questions  QuizQuestion[]
  progresses UserProgress[]
  attempts   QuizAttempt[]
}

model Lesson {
  id        String   @id @default(uuid())
  moduleId  String
  title     String
  order     Int      @default(0)
  updatedAt DateTime @default(now()) @updatedAt

  module     Module              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions  QuizQuestion[]
  userStates UserLessonProgress[]

  @@index([moduleId])
  @@unique([moduleId, title])   
}


model QuizQuestion {
  id           String   @id @default(uuid())
  moduleId     String
  lessonId     String?
  question     String
  options      String[]
  correctIndex Int
  feedback     String?   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lesson Lesson? @relation(fields: [lessonId], references: [id])

  @@index([moduleId])
  @@unique([moduleId, question])
}

model UserProgress {
  id           String   @id @default(uuid())
  userId       String
  moduleId     String
  progress     Int      @default(0)   // % completion at module level
  quizAccuracy Int      @default(0)
  timeSpentMin Int      @default(0)
  lastAccessed DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

model UserLessonProgress {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  accuracy  Int?    
  attempts  Int      @default(0) 
  lastAccess DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model QuizAttempt {
  id        String   @id @default(uuid())
  userId    String
  moduleId  String
  score     Int
  total     Int
  accuracy  Int
  createdAt DateTime @default(now())
  answers   Json?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([moduleId])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
